
import Redis from 'ioredis';

export class RedisCacheManager {
  constructor() {
    console.log(`[${new Date().toISOString()}] üöÄ Inicializando RedisCacheManager...`);

    // Obt√©m o endere√ßo do Redis da vari√°vel de ambiente ou usa 'localhost:6379' como fallback
    const redisHostPort = process.env.REDIS_HOST || 'localhost:6379';

    console.log(`[${new Date().toISOString()}] üîç Conectando ao Redis em:`, redisHostPort);

    // Extrai host e porta da string
    const [host, port] = redisHostPort.split(':');

    // Configura a conex√£o com Redis Standalone
    this.redisClient = new Redis({
      host: host.trim(),
      port: Number(port.trim()),
      retryStrategy: (times) => Math.min(times * 100, 3000), // Estrat√©gia de reconex√£o
      maxRetriesPerRequest: 3, // N√∫mero m√°ximo de tentativas por requisi√ß√£o
      connectTimeout: 30000, // Timeout de conex√£o em milissegundos
    });

    // Eventos de conex√£o para depura√ß√£o
    this.redisClient.on('connect', () => {
      console.log(`[${new Date().toISOString()}] ‚úÖ Conectado ao Redis!`);
    });

    this.redisClient.on('error', (error) => {
      console.error(`[${new Date().toISOString()}] ‚ùå Erro no Redis:`, error);
    });
  }
}

export default RedisCacheManager;
