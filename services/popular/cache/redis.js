import Redis from 'ioredis';

export class RedisCacheManager {
  constructor() {
    console.log(`[${new Date().toISOString()}] üöÄ Inicializando RedisCacheManager...`);

    // Obt√©m n√≥s do Redis Cluster da vari√°vel de ambiente ou usa um fallback
    const redisNodesEnv = process.env.REDIS_NODES 
      || 'redis-cluster-0.redis-cluster.redis-cluster.svc.cluster.local:6379,redis-cluster-1.redis-cluster.redis-cluster.svc.cluster.local:6379,redis-cluster-2.redis-cluster.redis-cluster.svc.cluster.local:6379';

    console.log(`[${new Date().toISOString()}] üîç Usando n√≥s Redis:`, redisNodesEnv);

    // Converte a string de n√≥s em um array de objetos [{host, port}, ...]
    const redisNodes = redisNodesEnv.split(',').map(node => {
      const [host, port] = node.split(':');
      return { host: host.trim(), port: Number(port.trim()) };
    });

    console.log(`[${new Date().toISOString()}] üõ†Ô∏è Configurando cluster Redis com os n√≥s:`, redisNodes);

    // Configura a conex√£o com o Redis Cluster
    this.redisClient = new Redis.Cluster(redisNodes, {
      scaleReads: 'master', // Garante que l√™ e escreve apenas nos mestres
      redisOptions: {
        retryStrategy: (times) => Math.min(times * 100, 3000), // Estrat√©gia de reconex√£o
        maxRetriesPerRequest: 3, // N√∫mero m√°ximo de tentativas por requisi√ß√£o
        connectTimeout: 30000, // Timeout de conex√£o em milissegundos
      },
    });

    // Eventos de conex√£o para depura√ß√£o
    this.redisClient.on('connect', () => {
      console.log(`[${new Date().toISOString()}] ‚úÖ Conectado ao Redis Cluster!`);
    });

    this.redisClient.on('error', (error) => {
      console.error(`[${new Date().toISOString()}] ‚ùå Erro no Redis Cluster:`, error);
    });
  }

}

export default RedisCacheManager;
